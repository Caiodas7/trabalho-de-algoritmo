'''üìå Ideia principal:
O Counting Sort conta quantas vezes cada n√∫mero aparece e usa essa contagem para montar a lista ordenada.

‚úÖ Vantagens:
Muito r√°pido para listas com n√∫meros pequenos e inteiros positivos.
Complexidade de tempo: O(n + k), onde k √© o maior n√∫mero.
N√£o usa compara√ß√£o.

‚ùå Desvantagens:
N√£o funciona com n√∫meros negativos (sem adapta√ß√£o).
Gasta muita mem√≥ria se o maior n√∫mero for muito alto.
N√£o √© eficiente para dados muito dispersos (ex: [1, 10000]).
'''

def counting_sort(lista):
    if not lista:
        return lista  # Lista vazia j√° est√° ordenada

    # 1. Encontra o maior valor da lista
    max_valor = max(lista)

    # 2. Cria uma lista de contagem com zeros (√≠ndices de 0 at√© max_valor)
    contagem = [0] * (max_valor + 1)

    # 3. Conta quantas vezes cada n√∫mero aparece
    for numero in lista:
        contagem[numero] += 1

    # 4. Reconstr√≥i a lista ordenada com base nas contagens
    index = 0
    for numero, qtd in enumerate(contagem):
        for _ in range(qtd):
            lista[index] = numero
            index += 1

    return lista


valores = [4, 2, 2, 8, 3, 3, 1]

# max_valor = 8 ‚Üí cria contagem de 9 posi√ß√µes (0 a 8)
# contagem: [0, 1, 2, 2, 1, 0, 0, 0, 1]
# ‚Üí tem 1 vez o 1, 2 vezes o 2, 2 vezes o 3, etc.

# Reconstr√≥i:
# lista = [1, 2, 2, 3, 3, 4, 8]

ordenado = counting_sort(valores)
print(ordenado)  # Sa√≠da: [1, 2, 2, 3, 3, 4, 8]
